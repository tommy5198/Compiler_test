Nullable
ArrayDecl           :true
ArrayParamDecl      :true
BinExpr             :true
BinOp               :false
Block               :false
DeclList            :true
DeclListTail        :false
Expr                :false
ExprList            :true
ExprListEnd         :true
ExprListTail        :false
FunDecl             :false
FunDeclList         :false
FunDeclListTail     :true
FuncHead            :false
IdTail              :true
ParamDecl           :false
ParamDeclEnd        :true
ParamDeclList       :true
ParamDeclListTail   :false
Primary             :false
Program             :true
Stmt                :false
StmtList            :false
StmtListTail        :true
Type                :false
UnaryOp             :false
VarDecl             :false
VarDeclList         :true

First
ArrayDecl           :[ 
ArrayParamDecl      :[ 
BinExpr             :!= && * + - / < <= == > >= || 
BinOp               :!= && * + - / < <= == > >= || 
Block               :{ 
DeclList            :char int 
DeclListTail        :( ; [ 
Expr                :! - id num 
ExprList            :! - id num 
ExprListEnd         :, 
ExprListTail        :! - id num 
FunDecl             :char int 
FunDeclList         :char int 
FunDeclListTail     :char int 
FuncHead            :( 
IdTail              :( [ 
ParamDecl           :char int 
ParamDeclEnd        :, 
ParamDeclList       :char int 
ParamDeclListTail   :char int 
Primary             :id num 
Program             :char int 
Stmt                :; break id if num return while { 
StmtList            :; break id if num return while { 
StmtListTail        :; break id if num return while { 
Type                :char int 
UnaryOp             :! - 
VarDecl             :char int 
VarDeclList         :char int 

Follow
ArrayDecl           :; 
ArrayParamDecl      :) , 
BinExpr             :) , ; ] 
BinOp               :id num 
Block               :$ ( ; break char else id if int num return while { } 
DeclList            :$ ( 
DeclListTail        :$ ( 
Expr                :) , ; ] 
ExprList            :) 
ExprListEnd         :) 
ExprListTail        :) 
FunDecl             :char int 
FunDeclList         :
FunDeclListTail     :
FuncHead            :$ ( char int 
IdTail              :!= && ) * + , - / ; < <= = == > >= ] id num || 
ParamDecl           :) , 
ParamDeclEnd        :) 
ParamDeclList       :) 
ParamDeclListTail   :) 
Primary             :!= && ) * + , - / ; < <= = == > >= ] id num || 
Program             :$ 
Stmt                :; break else id if num return while { } 
StmtList            :} 
StmtListTail        :} 
Type                :id 
UnaryOp             :id num 
VarDecl             :; break char id if int num return while { 
VarDeclList         :; break id if num return while { 
