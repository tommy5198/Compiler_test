Program
    VarDeclList FunDeclList
VarDeclList
    VarDecl VarDeclList
    epsilon
VarDecl
    Type id ArrayDecl ;         // ArrayDecl.type = Type.type, ArrayDecl.name = id
ArrayDecl
    [ num ]                     // insert(id, array, num, type)
    epsilon                     // insert(id, var, type)
FunDeclList
    FunDecl FunDeclListTail
FunDeclListTail
    FunDeclList
    epsilon
FunDecl
    Type id ( ParamDeclList ) Block  // ParamDeclList.name = id, ParamDeclList.type = Type.type
ParamDeclList
    ParamDeclListTail           //  // ParamDeclListTail.name = ParamDeclList.name, ParamDeclListTail.type = ParamDeclList.type
    epsilon                     
ParamDeclListTail
    ParamDecl ParamDeclEnd
ParamDeclEnd
    , ParamDeclListTail
    epsilon
ParamDecl
    Type id ArrayParamDecl      //  ArrayParamDecl = Par
ArrayParamDecl
    [ ]
    epsilon
Block           // inc scope id
    { VarDeclList StmtList }
Type            // set type
    int
    char
StmtList
    Stmt StmtListTail
StmtListTail
    StmtList
    epsilon
Stmt
    ;
    Expr ;
    return Expr ;
    break ;
    if ( Expr ) Stmt else Stmt
    while ( Expr ) Stmt
    Block
Expr
    Primary BinExpr
    UnaryOp Expr BinExpr
    id ArrayExpr = Expr BinExpr
BinExpr
    BinOp Expr
    epsilon
ArrayExpr
    [ Expr ]
    epsilon
Primary
    id IdTail
    num
    ( Expr )
IdTail
    ( ExprList )
    [ Expr ]
    epsilon
ExprList
    ExprListTail
    epsilon
ExprListTail
    Expr ExprListEnd
ExprListEnd
    , ExprListTail
    epsilon
UnaryOp         // UnaryOp.val = op UnaryOp.val
    -
    !
BinOp           // BinOp.val = BinOp.a op Binop.b
    +
    -
    *
    /
    ==
    !=
    <
    <=
    >
    >=
    &&
    ||
